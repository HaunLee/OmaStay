name: Java CI with Gradle

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Ensure directories and permissions
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            sudo rm -rf /home/ubuntu/OmaStay/conf/default.conf
            mkdir -p /home/ubuntu/OmaStay/conf
            sudo chown -R ubuntu:ubuntu /home/ubuntu/OmaStay/conf
            
            sudo mkdir -p /etc/nginx/ssl/accounts/omastay.duckdns.org
            sudo chown -R ubuntu:ubuntu /etc/nginx/ssl/accounts/omastay.duckdns.org
          EOF

      - name: Copy project files to EC2
        run: |
          set -e
          scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST }}:/home/ubuntu/OmaStay || exit 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install tailwindcss
        run: |
          cd src/main/frontend
          npm install

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Build with Gradle Wrapper
        run: gradle clean build

      # EC2 인스턴스에서 Docker 설치 확인
      - name: Ensure Docker is installed on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            if ! [ -x "$(command -v docker)" ]; then
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi
            sudo groupadd docker || true
            sudo usermod -aG docker ubuntu
          EOF
      
      # EC2 인스턴스 권한 수정 및 설치
      - name: Ensure correct permissions and installed packages on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            sudo chmod +x /home/ubuntu/OmaStay/install_certbot.sh
            sudo apt-get update
            sudo apt-get install -y certbot
          EOF

      # Docker 그룹에 사용자 추가
      - name: Add user to Docker group
        run: sudo usermod -aG docker $USER

      - name: Reload Docker session
        run: sudo chmod 666 /var/run/docker.sock

      - name: SSH into EC2 and run Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            set -e
            cd /home/ubuntu/OmaStay
            docker-compose down
            docker-compose up -d --build
            ./install_certbot.sh
          EOF
