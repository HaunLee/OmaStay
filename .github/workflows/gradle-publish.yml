name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'
        
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.PRIVATE_KEY }}

    - name: Remove existing default.conf directory from EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "rm -rf /home/ubuntu/OmaStay/conf/default.conf"

    - name: Copy files to EC2
      run: |
        scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST }}:/home/ubuntu/OmaStay

    - name: Ensure remote directory exists
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "mkdir -p /home/ubuntu/OmaStay/conf"

    - name: Copy default.conf to EC2
      run: |
        scp -o StrictHostKeyChecking=no ./conf/default.conf ubuntu@${{ secrets.HOST }}:/home/ubuntu/OmaStay/conf/default.conf

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    
    - name: frontend로 이동
      run: |
        cd src/main/frontend
    
    - name: tailwindcss 설치
      run: |
        npm install
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle
      
    - name: Build with Gradle Wrapper
      run: gradle clean build
      
    - name: Add user in the Docker group
      run: | 
        sudo usermod -aG docker $USER
        
    - name: reload docker session
      run: |
        sudo chmod 666 /var/run/docker.sock

    - name: SSH into EC2 and run Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
          cd /home/ubuntu/OmaStay
          docker-compose down
          docker-compose up -d --build
        EOF
