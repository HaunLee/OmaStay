name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.PRIVATE_KEY }}
        
    - name: Copy files to EC2
      run: |
        scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST }}:/home/ubuntu/OmaStay

    - name: Verify directory structure on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "ls -R /home/ubuntu/OmaStay"

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install Node.js dependencies
      run: |
        cd src/main/frontend
        npm install
        npm install @popperjs/core@^2.11.8

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4.0.0

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle

    - name: Grant execute permission for gradlew
      run: chmod u+x gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build --no-daemon --info

    - name: Install Docker using convenience script on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh"

    - name: Add ubuntu user to Docker group and restart Docker on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
          sudo usermod -aG docker ubuntu
          sudo systemctl restart docker
        EOF

    - name: Verify Docker permissions on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "docker ps"

    - name: Set permissions for the directory
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
          DIR="/home/ubuntu/OmaStay/nginx"
          if [ -d "$DIR" ]; then
              sudo chmod -R 777 "$DIR"
              if [ -d "$DIR/ssl/accounts" ]; then
                  sudo chown -R ubuntu:ubuntu "$DIR/ssl/accounts"
                  sudo chmod -R 755 "$DIR/ssl/accounts"
              fi
              if [ -d "$DIR/certbot" ]; then
                  sudo chmod -R 777 "$DIR/certbot"
              fi
          else
              echo "Directory $DIR does not exist."
          fi
        EOF

    - name: SSH into EC2 and clean up Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
          cd /home/ubuntu/OmaStay
          docker-compose down --remove-orphans
          docker-compose up -d --build
        EOF

    - name: SSH into EC2 and run Certbot
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
          cd /home/ubuntu/OmaStay
          # Verify Certbot directory
          ls -la /home/ubuntu/OmaStay/nginx/certbot
          # Initial SSL certificate request
          docker-compose run --rm certbot certonly --webroot --webroot-path=/var/www/certbot -d omastay.duckdns.org -d www.omastay.duckdns.org
          # Restart services to apply the certificate
          docker-compose restart nginx
          # Check Certbot log for details
          cat /var/log/letsencrypt/letsencrypt.log
        EOF
