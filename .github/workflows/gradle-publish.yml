name: Java CI with Gradle

on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. 레포지토리 체크아웃
      - uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. SSH 키 설정
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      # 4. 파일을 EC2로 복사
      - name: Copy files to EC2
        run: |
          scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST }}:/home/ubuntu/OmaStay

      # 5. Node.js 및 의존성 캐싱
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node

      - name: Install TailwindCSS and dependencies
        run: |
          cd src/main/frontend
          npm install
          npm install @popperjs/core@^2.11.8

      # 6. Gradle 설정 및 캐싱
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.0.0

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod u+x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build --no-daemon

      # 7. EC2에서 Docker 및 Docker Compose 설치
      - name: Install Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu
            sudo systemctl restart docker
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl --silent https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            exit
          EOF

      # 8. Docker 권한 및 상태 확인
      - name: Verify Docker permissions on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "docker ps"

      # 9. Docker Compose 실행
      - name: SSH into EC2 and run Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            cd /home/ubuntu/OmaStay
            docker-compose down
            docker-compose up -d --build
            exit
          EOF
