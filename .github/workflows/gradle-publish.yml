name: Java CI with Gradle

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Copy files to EC2
        run: |
          scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST }}:/home/ubuntu/OmaStay

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install tailwindcss and dependencies
        run: |
          cd src/main/frontend
          npm install
          npm install @popperjs/core@^2.11.8

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.0.0

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod u+x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build --no-daemon

      - name: Install Docker using convenience script on EC2
        run: |
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh"

      - name: Add ubuntu user to Docker group
        run: |
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "sudo usermod -aG docker ubuntu"

      - name: Restart Docker on EC2
        run: |
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "sudo systemctl restart docker"

      - name: Verify Docker permissions on EC2
        run: |
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "docker ps"

      - name: Remove existing Certbot container if exists
        run: |
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "docker rm -f certbot || true"

      - name: Create and set permissions for required directory on EC2
        run: |
          echo "Creating /var/www/certbot directory"
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "sudo mkdir -p /var/www/certbot && sudo chmod 777 /var/www/certbot"
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "ls -ld /var/www/certbot && echo 'Directory successfully created and permissions set' || echo 'Failed to create directory'"

      - name: Verify certbot directory creation and permissions on EC2
        run: |
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "if [ -d '/var/www/certbot' ]; then echo 'Directory exists and permissions are set.'; else echo 'Directory does not exist or permissions not set correctly.'; fi"

      - name: Verify certbot directory and permissions
        run: |
          echo "Verifying certbot directory and permissions"
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "sudo ls -ld /var/www/certbot"
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "sudo ls -l /var/www"

      - name: Check certbot directory inside Docker container
        run: |
          echo "Checking certbot directory inside Docker container"
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "docker run --name certbot-check -v /var/www/certbot:/var/www/certbot --rm alpine ls -ld /var/www/certbot"

      - name: Run Certbot for SSL certificates on EC2
        run: |
          echo "Running certbot"
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "docker run --rm --name certbot -v /home/ubuntu/OmaStay/nginx/ssl:/etc/letsencrypt -v /home/ubuntu/OmaStay/nginx/conf.d:/etc/nginx/conf.d -v /var/www/certbot:/var/www/certbot certbot/certbot certonly --webroot --webroot-path=/var/www/certbot -d omastay.duckdns.org -d www.omastay.duckdns.org --email dlflqhfl@gmail.com --non-interactive --agree-tos"

      - name: SSH into EC2 and run Docker Compose down
        run: |
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "cd /home/ubuntu/OmaStay && docker-compose down"

      - name: SSH into EC2 and run Docker Compose up
        run: |
          ssh -tt -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "cd /home/ubuntu/OmaStay && docker-compose up -d --build"
