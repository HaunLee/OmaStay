name: Java CI with Gradle

on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. 레포지토리 체크아웃
      - uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. SSH 키 설정
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      # 4. 파일을 EC2로 복사
      - name: Copy files to EC2
        run: |
          scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST }}:/home/ubuntu/OmaStay

<<<<<<< HEAD
      # .env 파일을 GitHub Secrets에서 읽어 EC2로 복사
      - name: Create .env file from secrets
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" > .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_REFRESH_TOKEN=${{ secrets.GOOGLE_REFRESH_TOKEN }}" >> .env

      # .env 파일을 EC2에서 생성하는 단계
      - name: Create .env file on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            echo "DB_URL=${{ secrets.DB_URL }}" > /home/ubuntu/OmaStay/.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> /home/ubuntu/OmaStay/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ubuntu/OmaStay/.env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> /home/ubuntu/OmaStay/.env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> /home/ubuntu/OmaStay/.env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> /home/ubuntu/OmaStay/.env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> /home/ubuntu/OmaStay/.env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> /home/ubuntu/OmaStay/.env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> /home/ubuntu/OmaStay/.env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> /home/ubuntu/OmaStay/.env
            echo "GOOGLE_REFRESH_TOKEN=${{ secrets.GOOGLE_REFRESH_TOKEN }}" >> /home/ubuntu/OmaStay/.env
          EOF

      # .env 파일 내용 확인 단계 추가
      - name: Verify .env content on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} "cat /home/ubuntu/OmaStay/.env"

      # .env 파일을 EC2로 복사
      - name: Copy .env to EC2
        run: scp -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.HOST }}:/home/ubuntu/OmaStay/.env

      # Gradle 설정
=======
      # 5. TailwindCSS 의존성 설치 (Node.js 설치 없이)
      - name: Install npm dependencies for TailwindCSS
        run: |
          cd src/main/frontend
          npm install  # 이미 있는 package.json을 기반으로 의존성 설치
          npm install @popperjs/core@^2.11.8

      # 6. Gradle 설정 및 캐싱
>>>>>>> parent of 353f790 (Update gradle-publish.yml)
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.0.0

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod u+x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build --no-daemon

<<<<<<< HEAD
      # Docker 그룹에 사용자 추가 및 Docker 재시작
      - name: Add ubuntu user to Docker group and restart Docker on EC2
=======
      # 7. Docker 및 Docker Compose 버전 확인
      - name: Verify Docker and Docker Compose versions on EC2
>>>>>>> parent of 353f790 (Update gradle-publish.yml)
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            docker --version
            docker-compose --version
            exit
          EOF

      # 8. Docker Compose 실행
      - name: SSH into EC2 and run Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            cd /home/ubuntu/OmaStay
            docker-compose down
            docker-compose up -d --build
            exit
          EOF
