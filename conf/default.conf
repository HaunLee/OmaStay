# HTTP 트래픽을 HTTPS로 리디렉션
server {
    listen 80;
    server_name omastay.duckdns.org www.omastay.duckdns.org;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS 설정
server {
    listen 443 ssl;
    server_name omastay.duckdns.org www.omastay.duckdns.org;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://backend:9090;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# IP 주소로 접속 시 403 에러를 반환
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name _;

    return 403;
}
# 여기는 클라이언트 요청을 백엔드 서버로 전달하는 역할을 함
# - proxy_pass http://backend:9090;
#   : 요청을 http://backend:9090 서버로 전달

# - proxy_set_header X-Real-IP $remote_addr;
#   : 헤더에 X-Real-IP라는 헤더를 추가하고, 클라이언트의 실제 IP 주소를 포함

# - proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#   : 헤더의 X-Forwarded-For속성에 클라이언트의 IP 주소를 추가함

# - proxy_set_header X-Forwarded-Proto $scheme;
#   : 헤더의 X-Forwarded-Proto속성에 클라이언트의 원래 요청이 어떤 프로토콜 (http 또는 https)

